#include <supersaw.h>
/* ------------------------------------------------------------
Code generated with Faust 2.0.a51 (http://faust.grame.fr)
------------------------------------------------------------ */
#include <stdlib.h>

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  


#ifdef __cplusplus
extern "C" {
#endif

#include <math.h>

float expf(float dummy0);
float faustpower2_f(float value) {
	return (value * value);
	
}
float fabsf(float dummy0);

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif



mydsp* newmydsp() { 
	mydsp* dsp = (mydsp*)malloc(sizeof(mydsp));
	return dsp;
}

void deletemydsp(mydsp* dsp) { 
	free(dsp);
}

void metadatamydsp(MetaGlue* m) { 
	m->declare(m->mInterface, "math.lib/author", "GRAME");
	m->declare(m->mInterface, "math.lib/copyright", "GRAME");
	m->declare(m->mInterface, "math.lib/license", "LGPL with exception");
	m->declare(m->mInterface, "math.lib/name", "Faust Math Library");
	m->declare(m->mInterface, "math.lib/version", "2.0");
	m->declare(m->mInterface, "music.lib/author", "GRAME");
	m->declare(m->mInterface, "music.lib/copyright", "GRAME");
	m->declare(m->mInterface, "music.lib/deprecated", "This library is deprecated and is not maintained anymore. It might be removed in future released.");
	m->declare(m->mInterface, "music.lib/license", "LGPL with exception");
	m->declare(m->mInterface, "music.lib/name", "Music Library");
	m->declare(m->mInterface, "music.lib/version", "1.0");
	m->declare(m->mInterface, "oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
	m->declare(m->mInterface, "oscillator.lib/copyright", "Julius O. Smith III");
	m->declare(m->mInterface, "oscillator.lib/deprecated", "This library is deprecated and is not maintained anymore. It might be removed in future released.");
	m->declare(m->mInterface, "oscillator.lib/license", "STK-4.3");
	m->declare(m->mInterface, "oscillator.lib/name", "Faust Oscillator Library");
	m->declare(m->mInterface, "oscillator.lib/version", "1.11");
}

int getSampleRatemydsp(mydsp* dsp) { return dsp->fSamplingFreq; }

int getNumInputsmydsp(mydsp* dsp) {
	return 0;
	
}
int getNumOutputsmydsp(mydsp* dsp) {
	return 1;
	
}
int getInputRatemydsp(mydsp* dsp, int channel) {
	int rate;
	switch (channel) {
		default: {
			rate = -1;
			break;
		}
		
	}
	return rate;
	
}
int getOutputRatemydsp(mydsp* dsp, int channel) {
	int rate;
	switch (channel) {
		case 0: {
			rate = 1;
			break;
		}
		default: {
			rate = -1;
			break;
		}
		
	}
	return rate;
	
}

void classInitmydsp(int samplingFreq) {
	
}

void instanceResetUserInterfacemydsp(mydsp* dsp) {
	dsp->fEntry0 = (FAUSTFLOAT)0.5f;
	dsp->fEntry1 = (FAUSTFLOAT)60.0f;
	
}

void instanceClearmydsp(mydsp* dsp) {
	/* C99 loop */
	{
		int i0;
		for (i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
			dsp->fRec0[i0] = 0.0f;
			
		}
		
	}
	dsp->IOTA = 0;
	/* C99 loop */
	{
		int i1;
		for (i1 = 0; (i1 < 256); i1 = (i1 + 1)) {
			dsp->fVec0[i1] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i2;
		for (i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
			dsp->fRec2[i2] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i3;
		for (i3 = 0; (i3 < 1024); i3 = (i3 + 1)) {
			dsp->fVec1[i3] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i4;
		for (i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
			dsp->fRec4[i4] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i5;
		for (i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
			dsp->fRec6[i5] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i6;
		for (i6 = 0; (i6 < 2); i6 = (i6 + 1)) {
			dsp->fRec8[i6] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i7;
		for (i7 = 0; (i7 < 2); i7 = (i7 + 1)) {
			dsp->fRec10[i7] = 0.0f;
			
		}
		
	}
	/* C99 loop */
	{
		int i8;
		for (i8 = 0; (i8 < 2); i8 = (i8 + 1)) {
			dsp->fRec12[i8] = 0.0f;
			
		}
		
	}
	
}

void instanceConstantsmydsp(mydsp* dsp, int samplingFreq) {
	dsp->fSamplingFreq = samplingFreq;
	dsp->fConst0 = min(192000.0f, max(1.0f, (float)dsp->fSamplingFreq));
	dsp->fConst1 = (1.0f / dsp->fConst0);
	
}

void instanceInitmydsp(mydsp* dsp, int samplingFreq) {
	instanceConstantsmydsp(dsp, samplingFreq);
	instanceResetUserInterfacemydsp(dsp);
	instanceClearmydsp(dsp);
}

void initmydsp(mydsp* dsp, int samplingFreq) {
	classInitmydsp(samplingFreq);
	instanceInitmydsp(dsp, samplingFreq);
}

void buildUserInterfacemydsp(mydsp* dsp, UIGlue* ui_interface) {
	ui_interface->openVerticalBox(ui_interface->uiInterface, "0x00");
	ui_interface->declare(ui_interface->uiInterface, &dsp->fEntry1, "in Hz", "");
	ui_interface->addNumEntry(ui_interface->uiInterface, "1-freq", &dsp->fEntry1, 60.0f, 0.0f, 3000.0f, 0.5f);
	ui_interface->declare(ui_interface->uiInterface, &dsp->fEntry0, "normal", "");
	ui_interface->addNumEntry(ui_interface->uiInterface, "2-detune", &dsp->fEntry0, 0.5f, 0.0f, 1.0f, 0.00999999978f);
	ui_interface->closeBox(ui_interface->uiInterface);
	
}

void computemydsp(mydsp* dsp, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
	FAUSTFLOAT* output0 = outputs[0];
	float fSlow0 = (float)dsp->fEntry0;
	float fSlow1 = (expf((20.0f * (fSlow0 + -1.0f))) + faustpower2_f(fSlow0));
	float fSlow2 = (float)dsp->fEntry1;
	float fSlow3 = max(1.00000001e-07f, fabsf((((0.00995610468f * fSlow1) + 1.0f) * fSlow2)));
	float fSlow4 = (dsp->fConst1 * fSlow3);
	float fSlow5 = (1.0f - (dsp->fConst0 / fSlow3));
	float fSlow6 = max(1.00000001e-07f, fabsf((((0.0537262112f * fSlow1) + 1.0f) * fSlow2)));
	float fSlow7 = (dsp->fConst1 * fSlow6);
	float fSlow8 = (1.0f - (dsp->fConst0 / fSlow6));
	float fSlow9 = max(1.00000001e-07f, fabsf((((0.0310826898f * fSlow1) + 1.0f) * fSlow2)));
	float fSlow10 = (dsp->fConst1 * fSlow9);
	float fSlow11 = (1.0f - (dsp->fConst0 / fSlow9));
	float fSlow12 = max(1.00000001e-07f, fabsf(fSlow2));
	float fSlow13 = (dsp->fConst1 * fSlow12);
	float fSlow14 = (1.0f - (dsp->fConst0 / fSlow12));
	float fSlow15 = max(1.00000001e-07f, fabsf((((0.5f * (0.0f - (0.110023141f * fSlow1))) + 1.0f) * fSlow2)));
	float fSlow16 = (dsp->fConst1 * fSlow15);
	float fSlow17 = (1.0f - (dsp->fConst0 / fSlow15));
	float fSlow18 = max(1.00000001e-07f, fabsf((((0.5f * (0.0f - (0.0628843978f * fSlow1))) + 1.0f) * fSlow2)));
	float fSlow19 = (dsp->fConst1 * fSlow18);
	float fSlow20 = (1.0f - (dsp->fConst0 / fSlow18));
	float fSlow21 = max(1.00000001e-07f, fabsf((((0.5f * (0.0f - (0.0195235703f * fSlow1))) + 1.0f) * fSlow2)));
	float fSlow22 = (dsp->fConst1 * fSlow21);
	float fSlow23 = (1.0f - (dsp->fConst0 / fSlow21));
	/* C99 loop */
	{
		int i;
		for (i = 0; (i < count); i = (i + 1)) {
			float fTemp0 = (fSlow4 + (dsp->fRec0[1] + -1.0f));
			int iTemp1 = (fTemp0 < 0.0f);
			float fTemp2 = (fSlow4 + dsp->fRec0[1]);
			dsp->fRec0[0] = (iTemp1?fTemp2:fTemp0);
			float fRec1 = (iTemp1?fTemp2:(fSlow4 + (dsp->fRec0[1] + (fSlow5 * fTemp0))));
			dsp->fVec0[(dsp->IOTA & 255)] = ((2.0f * fRec1) + -1.0f);
			float fTemp3 = (fSlow7 + (dsp->fRec2[1] + -1.0f));
			int iTemp4 = (fTemp3 < 0.0f);
			float fTemp5 = (fSlow7 + dsp->fRec2[1]);
			dsp->fRec2[0] = (iTemp4?fTemp5:fTemp3);
			float fRec3 = (iTemp4?fTemp5:(fSlow7 + (dsp->fRec2[1] + (fSlow8 * fTemp3))));
			dsp->fVec1[(dsp->IOTA & 1023)] = ((2.0f * fRec3) + -1.0f);
			float fTemp6 = (fSlow10 + (dsp->fRec4[1] + -1.0f));
			int iTemp7 = (fTemp6 < 0.0f);
			float fTemp8 = (fSlow10 + dsp->fRec4[1]);
			dsp->fRec4[0] = (iTemp7?fTemp8:fTemp6);
			float fRec5 = (iTemp7?fTemp8:(fSlow10 + (dsp->fRec4[1] + (fSlow11 * fTemp6))));
			float fTemp9 = (fSlow13 + (dsp->fRec6[1] + -1.0f));
			int iTemp10 = (fTemp9 < 0.0f);
			float fTemp11 = (fSlow13 + dsp->fRec6[1]);
			dsp->fRec6[0] = (iTemp10?fTemp11:fTemp9);
			float fRec7 = (iTemp10?fTemp11:(fSlow13 + (dsp->fRec6[1] + (fSlow14 * fTemp9))));
			float fTemp12 = (fSlow16 + (dsp->fRec8[1] + -1.0f));
			int iTemp13 = (fTemp12 < 0.0f);
			float fTemp14 = (fSlow16 + dsp->fRec8[1]);
			dsp->fRec8[0] = (iTemp13?fTemp14:fTemp12);
			float fRec9 = (iTemp13?fTemp14:(fSlow16 + (dsp->fRec8[1] + (fSlow17 * fTemp12))));
			float fTemp15 = (fSlow19 + (dsp->fRec10[1] + -1.0f));
			int iTemp16 = (fTemp15 < 0.0f);
			float fTemp17 = (fSlow19 + dsp->fRec10[1]);
			dsp->fRec10[0] = (iTemp16?fTemp17:fTemp15);
			float fRec11 = (iTemp16?fTemp17:(fSlow19 + (dsp->fRec10[1] + (fSlow20 * fTemp15))));
			float fTemp18 = (fSlow22 + (dsp->fRec12[1] + -1.0f));
			int iTemp19 = (fTemp18 < 0.0f);
			float fTemp20 = (fSlow22 + dsp->fRec12[1]);
			dsp->fRec12[0] = (iTemp19?fTemp20:fTemp18);
			float fRec13 = (iTemp19?fTemp20:(fSlow22 + (dsp->fRec12[1] + (fSlow23 * fTemp18))));
			output0[i] = (FAUSTFLOAT)((dsp->fVec0[((dsp->IOTA - 218) & 255)] + dsp->fVec1[((dsp->IOTA - 1002) & 1023)]) + (-1.0f - (2.0f * (2.0f - (fRec5 + (fRec7 + ((fRec9 + fRec11) + fRec13)))))));
			dsp->fRec0[1] = dsp->fRec0[0];
			dsp->IOTA = (dsp->IOTA + 1);
			dsp->fRec2[1] = dsp->fRec2[0];
			dsp->fRec4[1] = dsp->fRec4[0];
			dsp->fRec6[1] = dsp->fRec6[0];
			dsp->fRec8[1] = dsp->fRec8[0];
			dsp->fRec10[1] = dsp->fRec10[0];
			dsp->fRec12[1] = dsp->fRec12[0];
			
		}
		
	}
	
}

#ifdef __cplusplus
}
#endif


#endif
